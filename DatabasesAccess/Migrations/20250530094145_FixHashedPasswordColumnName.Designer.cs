// <auto-generated />
using System;
using DatabasesAccess.AccountDb;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DatabasesAccess.Migrations
{
    [DbContext(typeof(AccountContext))]
    [Migration("20250530094145_FixHashedPasswordColumnName")]
    partial class FixHashedPasswordColumnName
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DatabaseModels.AccountDatabaseModels.Adress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int?>("ApartmentNumber")
                        .HasColumnType("integer")
                        .HasColumnName("apartment_number");

                    b.Property<int>("BuildingNumber")
                        .HasColumnType("integer")
                        .HasColumnName("building_number");

                    b.Property<string>("Liter")
                        .HasColumnType("text")
                        .HasColumnName("liter");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("region");

                    b.Property<string>("Settlement")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("settlement");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("street_name");

                    b.HasKey("Id");

                    b.ToTable("adress");
                });

            modelBuilder.Entity("DatabaseModels.AccountDatabaseModels.ShopppingCart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("shopping_cart");
                });

            modelBuilder.Entity("DatabaseModels.AccountDatabaseModels.ShopppingCartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uuid")
                        .HasColumnName("cart_id");

                    b.Property<long>("Count")
                        .HasColumnType("bigint")
                        .HasColumnName("count");

                    b.Property<long>("ProductItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("product_item_id");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.ToTable("shopping_cart_item");
                });

            modelBuilder.Entity("DatabaseModels.AccountDatabaseModels.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("hashed_password");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Email" }, "ix_user_email")
                        .IsUnique();

                    b.HasIndex(new[] { "PhoneNumber" }, "ix_user_phone_number")
                        .IsUnique();

                    b.ToTable("user");
                });

            modelBuilder.Entity("DatabaseModels.AccountDatabaseModels.UserAdress", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("AdresssId")
                        .HasColumnType("uuid")
                        .HasColumnName("adress_id");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean")
                        .HasColumnName("id_default");

                    b.HasKey("UserId", "AdresssId");

                    b.HasIndex("AdresssId");

                    b.ToTable("user_adress");
                });

            modelBuilder.Entity("DatabaseModels.AccountDatabaseModels.UserPaymentMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("BankCardLastNumbers")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("bank_card_last_numbers");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean")
                        .HasColumnName("id_default");

                    b.Property<string>("PaymentAgregatorCardId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("payment_agregator_user_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_payment_method");
                });

            modelBuilder.Entity("DatabaseModels.AccountDatabaseModels.ShopppingCart", b =>
                {
                    b.HasOne("DatabaseModels.AccountDatabaseModels.User", "User")
                        .WithMany("ShopppingCarts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_shopping_cart_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DatabaseModels.AccountDatabaseModels.ShopppingCartItem", b =>
                {
                    b.HasOne("DatabaseModels.AccountDatabaseModels.ShopppingCart", "ShopppingCart")
                        .WithMany("Items")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_shopping_cart_item_shopping_cart_id");

                    b.Navigation("ShopppingCart");
                });

            modelBuilder.Entity("DatabaseModels.AccountDatabaseModels.UserAdress", b =>
                {
                    b.HasOne("DatabaseModels.AccountDatabaseModels.Adress", "Adress")
                        .WithMany("UserAdresses")
                        .HasForeignKey("AdresssId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_adress_user_id");

                    b.HasOne("DatabaseModels.AccountDatabaseModels.User", "User")
                        .WithMany("UserAdresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_user_adress_user_id");

                    b.Navigation("Adress");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DatabaseModels.AccountDatabaseModels.UserPaymentMethod", b =>
                {
                    b.HasOne("DatabaseModels.AccountDatabaseModels.User", "User")
                        .WithMany("UserPaymentMethods")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_user_payment_method_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DatabaseModels.AccountDatabaseModels.Adress", b =>
                {
                    b.Navigation("UserAdresses");
                });

            modelBuilder.Entity("DatabaseModels.AccountDatabaseModels.ShopppingCart", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("DatabaseModels.AccountDatabaseModels.User", b =>
                {
                    b.Navigation("ShopppingCarts");

                    b.Navigation("UserAdresses");

                    b.Navigation("UserPaymentMethods");
                });
#pragma warning restore 612, 618
        }
    }
}
